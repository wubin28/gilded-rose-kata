{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi\n\njava -cp $CLASSES TexttestFixture\n","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n......\nTime: 0.038\n\nOK (6 tests)\n\nOMGHAI!\n-------- day 0 --------\nname, sellIn, quality\n+5 Dexterity Vest, 10, 20\nAged Brie, 2, 0\nElixir of the Mongoose, 5, 7\nSulfuras, Hand of Ragnaros, 0, 80\nSulfuras, Hand of Ragnaros, -1, 80\nBackstage passes to a TAFKAL80ETC concert, 15, 20\nBackstage passes to a TAFKAL80ETC concert, 10, 49\nBackstage passes to a TAFKAL80ETC concert, 5, 49\nConjured Mana Cake, 3, 6\n\n-------- day 1 --------\nname, sellIn, quality\n+5 Dexterity Vest, 9, 19\nAged Brie, 1, 1\nElixir of the Mongoose, 4, 6\nSulfuras, Hand of Ragnaros, 0, 80\nSulfuras, Hand of Ragnaros, -1, 80\nBackstage passes to a TAFKAL80ETC concert, 14, 21\nBackstage passes to a TAFKAL80ETC concert, 9, 50\nBackstage passes to a TAFKAL80ETC concert, 4, 50\nConjured Mana Cake, 2, 5\n\n","instructions":"\nThis is an instructor-led exercise with no written instructions.\nYour instructor will explain the exercise.\n","GildedRoseTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class GildedRoseTest {\n\n    @Test\n    public void quality_of_normal_item_should_degrade_at_the_end_of_each_day() {\n        // Given\n        Item[] items = new Item[] {\n            new Item(\"+5 Dexterity Vest\", 10, 20) };\n        GildedRose app = new GildedRose(items);\n\n        // When\n        app.updateQuality();\n\n        // Then\n        assertEquals(19, items[0].quality);\n    }\n\n    @Test\n    public void quality_of_normal_item_should_not_degrade_to_be_negative() {\n        // Given\n        Item[] items = new Item[] {\n            new Item(\"+5 Dexterity Vest\", 10, 0) };\n        GildedRose app = new GildedRose(items);\n\n        // When\n        app.updateQuality();\n\n        // Then\n        assertEquals(0, items[0].quality);\n    }\n\n    @Test\n    public void quality_of_aged_brie_should_increase_at_the_end_of_each_day() {\n        // Given\n        Item[] items = new Item[] {\n            new Item(\"Aged Brie\", 10, 20) };\n        GildedRose app = new GildedRose(items);\n\n        // When\n        app.updateQuality();\n\n        // Then\n        assertEquals(21, items[0].quality);\n    }\n\n    @Test\n    public void quality_of_aged_brie_should_increase_up_to_50() {\n        // Given\n        Item[] items = new Item[] {\n            new Item(\"Aged Brie\", 10, 50) };\n        GildedRose app = new GildedRose(items);\n\n        // When\n        app.updateQuality();\n\n        // Then\n        assertEquals(50, items[0].quality);\n    }\n\n    @Test\n    public void quality_of_backstage_passes_should_increase_by_1_if_sellIn_is_more_than_10() {\n        // Given\n        Item[] items = new Item[] {\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 11, 20) };\n        GildedRose app = new GildedRose(items);\n\n        // When\n        app.updateQuality();\n\n        // Then\n        assertEquals(21, items[0].quality);\n    }\n\n    @Test\n    public void quality_of_backstage_passes_should_increase_by_2_if_sellIn_is_more_than_5_and_less_than_11() {\n        // Given\n        Item[] items = new Item[] {\n            new Item(\"Backstage passes to a TAFKAL80ETC concert\", 6, 20) };\n        GildedRose app = new GildedRose(items);\n\n        // When\n        app.updateQuality();\n\n        // Then\n        assertEquals(22, items[0].quality);\n    }\n\n    // TODO: quality_of_backstage_passes_should_increase_by_3_if_sellIn_is_more_than_0_and_less_than_6\n    // TODO: quality_of_backstage_passes_should_increase_up_to_50\n    // TODO: sellIn_of_sulfuras_should_never_be_changed\n    // TODO: sellIn_of_item_other_than_sulfuras_should_degrade_at_the_end_of_each_day\n    // TODO: quality_of_normal_item_should_degrade_by_2_if_sellIn_is_less_than_0\n    // TODO: quality_of_backstage_passes_should_degrade_to_be_0_if_sellIn_is_less_than_0\n    // TODO: quality_of_aged_brie_should_increase_by_2_if_sellIn_is_less_than_0\n}\n","GildedRose.java":"class GildedRose {\n    Item[] items;\n\n    public GildedRose(Item[] items) {\n        this.items = items;\n    }\n\n    public void updateQuality() {\n        for (int i = 0; i < items.length; i++) {\n            if (!items[i].name.equals(\"Aged Brie\")\n                    && !items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                if (items[i].quality > 0) {\n                    if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                        items[i].quality = items[i].quality - 1;\n                    }\n                }\n            } else {\n                if (items[i].quality < 50) {\n                    items[i].quality = items[i].quality + 1;\n\n                    if (items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].sellIn < 11) {\n                            if (items[i].quality < 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n\n                        if (items[i].sellIn < 6) {\n                            if (items[i].quality < 50) {\n                                items[i].quality = items[i].quality + 1;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                items[i].sellIn = items[i].sellIn - 1;\n            }\n\n            if (items[i].sellIn < 0) {\n                if (!items[i].name.equals(\"Aged Brie\")) {\n                    if (!items[i].name.equals(\"Backstage passes to a TAFKAL80ETC concert\")) {\n                        if (items[i].quality > 0) {\n                            if (!items[i].name.equals(\"Sulfuras, Hand of Ragnaros\")) {\n                                items[i].quality = items[i].quality - 1;\n                            }\n                        }\n                    } else {\n                        items[i].quality = items[i].quality - items[i].quality;\n                    }\n                } else {\n                    if (items[i].quality < 50) {\n                        items[i].quality = items[i].quality + 1;\n                    }\n                }\n            }\n        }\n    }\n}\n","Item.java":"public class Item {\n\n    public String name;\n\n    public int sellIn;\n\n    public int quality;\n\n    public Item(String name, int sellIn, int quality) {\n        this.name = name;\n        this.sellIn = sellIn;\n        this.quality = quality;\n    }\n\n    public String toString() {\n        return this.name + \", \" + this.sellIn + \", \" + this.quality;\n    }\n}\n","TexttestFixture.java":"public class TexttestFixture {\n    public static void main(String[] args) {\n        System.out.println(\"OMGHAI!\");\n\n        Item[] items = new Item[] {\n                new Item(\"+5 Dexterity Vest\", 10, 20), //\n                new Item(\"Aged Brie\", 2, 0), //\n                new Item(\"Elixir of the Mongoose\", 5, 7), //\n                new Item(\"Sulfuras, Hand of Ragnaros\", 0, 80), //\n                new Item(\"Sulfuras, Hand of Ragnaros\", -1, 80),\n                new Item(\"Backstage passes to a TAFKAL80ETC concert\", 15, 20),\n                new Item(\"Backstage passes to a TAFKAL80ETC concert\", 10, 49),\n                new Item(\"Backstage passes to a TAFKAL80ETC concert\", 5, 49),\n                // this conjured item does not work properly yet\n                new Item(\"Conjured Mana Cake\", 3, 6) };\n\n        GildedRose app = new GildedRose(items);\n\n        int days = 2;\n        if (args.length > 0) {\n            days = Integer.parseInt(args[0]) + 1;\n        }\n\n        for (int i = 0; i < days; i++) {\n            System.out.println(\"-------- day \" + i + \" --------\");\n            System.out.println(\"name, sellIn, quality\");\n            for (Item item : items) {\n                System.out.println(item);\n            }\n            System.out.println();\n            app.updateQuality();\n        }\n    }\n\n}\n"}